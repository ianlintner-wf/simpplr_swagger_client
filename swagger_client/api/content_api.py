# coding: utf-8

"""
    Simpplr APIs

    This collection of Simpplr APIs lets developers create and manage content outside the Simpplr UI. We have APIs for notifications, alerts, app searches, and content creation. Looking for parameters or code samples? Click on an endpoint to see a sample snippet along with descriptions of its parameters and responses.  If you have questions about an API, reach out to us support@simpplr.com  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ContentApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def event_create(self, data, site_id, **kwargs):  # noqa: E501
        """Create an Event  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_create(data, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Event data: (required)
        :param str site_id: Site Id in which the event needs to be created (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.event_create_with_http_info(data, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.event_create_with_http_info(data, site_id, **kwargs)  # noqa: E501
            return data

    def event_create_with_http_info(self, data, site_id, **kwargs):  # noqa: E501
        """Create an Event  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_create_with_http_info(data, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Event data: (required)
        :param str site_id: Site Id in which the event needs to be created (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method event_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `event_create`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `event_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'site_id' in params:
            query_params.append(('siteId', params['site_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apex/DataServerRW?target=SiteAddEventDataServer&action=publish', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def event_delete(self, data, site_id, **kwargs):  # noqa: E501
        """Delete an Event  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_delete(data, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Delete data: (required)
        :param str site_id: Site Id in which the event needs to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.event_delete_with_http_info(data, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.event_delete_with_http_info(data, site_id, **kwargs)  # noqa: E501
            return data

    def event_delete_with_http_info(self, data, site_id, **kwargs):  # noqa: E501
        """Delete an Event  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_delete_with_http_info(data, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Delete data: (required)
        :param str site_id: Site Id in which the event needs to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method event_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `event_delete`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `event_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'site_id' in params:
            query_params.append(('siteId', params['site_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apex/DataServerRW?target=AllContentDataServer&action=delete&type=Event', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def event_get(self, content_id, **kwargs):  # noqa: E501
        """Get an Event  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_get(content_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_id: Id of event (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.event_get_with_http_info(content_id, **kwargs)  # noqa: E501
        else:
            (data) = self.event_get_with_http_info(content_id, **kwargs)  # noqa: E501
            return data

    def event_get_with_http_info(self, content_id, **kwargs):  # noqa: E501
        """Get an Event  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_get_with_http_info(content_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_id: Id of event (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method event_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_id' is set
        if ('content_id' not in params or
                params['content_id'] is None):
            raise ValueError("Missing the required parameter `content_id` when calling `event_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'content_id' in params:
            query_params.append(('contentId', params['content_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apex/DataServerRW?target=SiteAddEventDataServer&action=get', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def event_update(self, data, content_id, site_id, **kwargs):  # noqa: E501
        """Update an Event  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_update(data, content_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EventUpdate data: (required)
        :param str content_id: Id of event that needs to be updated (required)
        :param str site_id: Site Id in which the event needs to be updated (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.event_update_with_http_info(data, content_id, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.event_update_with_http_info(data, content_id, site_id, **kwargs)  # noqa: E501
            return data

    def event_update_with_http_info(self, data, content_id, site_id, **kwargs):  # noqa: E501
        """Update an Event  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_update_with_http_info(data, content_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EventUpdate data: (required)
        :param str content_id: Id of event that needs to be updated (required)
        :param str site_id: Site Id in which the event needs to be updated (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data', 'content_id', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method event_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `event_update`")  # noqa: E501
        # verify the required parameter 'content_id' is set
        if ('content_id' not in params or
                params['content_id'] is None):
            raise ValueError("Missing the required parameter `content_id` when calling `event_update`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `event_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'content_id' in params:
            query_params.append(('contentId', params['content_id']))  # noqa: E501
        if 'site_id' in params:
            query_params.append(('siteId', params['site_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apex/DataServerRW?target=SiteAddEventDataServer&action=update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_latest_content_for_a_site_by_site_id(self, data, site_id, **kwargs):  # noqa: E501
        """List Latest Content for a site by Site ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_latest_content_for_a_site_by_site_id(data, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LatestContent data: (required)
        :param str site_id: Site Id in which the Latest Content needs to be Listed (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_latest_content_for_a_site_by_site_id_with_http_info(data, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_latest_content_for_a_site_by_site_id_with_http_info(data, site_id, **kwargs)  # noqa: E501
            return data

    def list_latest_content_for_a_site_by_site_id_with_http_info(self, data, site_id, **kwargs):  # noqa: E501
        """List Latest Content for a site by Site ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_latest_content_for_a_site_by_site_id_with_http_info(data, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LatestContent data: (required)
        :param str site_id: Site Id in which the Latest Content needs to be Listed (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_latest_content_for_a_site_by_site_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `list_latest_content_for_a_site_by_site_id`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `list_latest_content_for_a_site_by_site_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'site_id' in params:
            query_params.append(('siteId', params['site_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apex/DataServerRW?target=AllContentDataServer&action=search&filter=latest', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_latest_contentfromsites_ifollow(self, data, **kwargs):  # noqa: E501
        """List Latest Content from sites I follow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_latest_contentfromsites_ifollow(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LatestContentFollowed data: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_latest_contentfromsites_ifollow_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.list_latest_contentfromsites_ifollow_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def list_latest_contentfromsites_ifollow_with_http_info(self, data, **kwargs):  # noqa: E501
        """List Latest Content from sites I follow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_latest_contentfromsites_ifollow_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LatestContentFollowed data: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_latest_contentfromsites_ifollow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `list_latest_contentfromsites_ifollow`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apex/DataServerRW?target=AllContentDataServer&action=search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_popular_content_for_a_site_by_site_id(self, data, site_id, **kwargs):  # noqa: E501
        """List Popular Content for a site by Site ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_popular_content_for_a_site_by_site_id(data, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PopularContent data: (required)
        :param str site_id: Site Id in which the Popular Content needs to be Listed (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_popular_content_for_a_site_by_site_id_with_http_info(data, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_popular_content_for_a_site_by_site_id_with_http_info(data, site_id, **kwargs)  # noqa: E501
            return data

    def list_popular_content_for_a_site_by_site_id_with_http_info(self, data, site_id, **kwargs):  # noqa: E501
        """List Popular Content for a site by Site ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_popular_content_for_a_site_by_site_id_with_http_info(data, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PopularContent data: (required)
        :param str site_id: Site Id in which the Popular Content needs to be Listed (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_popular_content_for_a_site_by_site_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `list_popular_content_for_a_site_by_site_id`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `list_popular_content_for_a_site_by_site_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'site_id' in params:
            query_params.append(('siteId', params['site_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apex/DataServerRW?target=AllContentDataServer&action=search&filter=popular', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def page_create(self, data, site_id, **kwargs):  # noqa: E501
        """Create a Page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.page_create(data, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Page data: (required)
        :param str site_id: Site Id in which the page needs to be created (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.page_create_with_http_info(data, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.page_create_with_http_info(data, site_id, **kwargs)  # noqa: E501
            return data

    def page_create_with_http_info(self, data, site_id, **kwargs):  # noqa: E501
        """Create a Page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.page_create_with_http_info(data, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Page data: (required)
        :param str site_id: Site Id in which the page needs to be created (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method page_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `page_create`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `page_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'site_id' in params:
            query_params.append(('siteId', params['site_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apex/DataServerRW?target=SiteAddPageDataServer&action=publish', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def page_delete(self, data, site_id, **kwargs):  # noqa: E501
        """Delete a Page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.page_delete(data, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Delete data: (required)
        :param str site_id: Site Id in which the page needs to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.page_delete_with_http_info(data, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.page_delete_with_http_info(data, site_id, **kwargs)  # noqa: E501
            return data

    def page_delete_with_http_info(self, data, site_id, **kwargs):  # noqa: E501
        """Delete a Page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.page_delete_with_http_info(data, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Delete data: (required)
        :param str site_id: Site Id in which the page needs to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method page_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `page_delete`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `page_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'site_id' in params:
            query_params.append(('siteId', params['site_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apex/DataServerRW?target=AllContentDataServer&action=delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def page_get(self, content_id, **kwargs):  # noqa: E501
        """Get a Page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.page_get(content_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_id: Id of the page (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.page_get_with_http_info(content_id, **kwargs)  # noqa: E501
        else:
            (data) = self.page_get_with_http_info(content_id, **kwargs)  # noqa: E501
            return data

    def page_get_with_http_info(self, content_id, **kwargs):  # noqa: E501
        """Get a Page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.page_get_with_http_info(content_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_id: Id of the page (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method page_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_id' is set
        if ('content_id' not in params or
                params['content_id'] is None):
            raise ValueError("Missing the required parameter `content_id` when calling `page_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'content_id' in params:
            query_params.append(('contentId', params['content_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apex/DataServerRW?target=SiteAddPageDataServer&action=get', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def page_update(self, data, content_id, site_id, **kwargs):  # noqa: E501
        """Edit a Page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.page_update(data, content_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Page data: (required)
        :param str content_id: Id of page that needs to be updated (required)
        :param str site_id: Site Id in which the page needs to be updated (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.page_update_with_http_info(data, content_id, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.page_update_with_http_info(data, content_id, site_id, **kwargs)  # noqa: E501
            return data

    def page_update_with_http_info(self, data, content_id, site_id, **kwargs):  # noqa: E501
        """Edit a Page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.page_update_with_http_info(data, content_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Page data: (required)
        :param str content_id: Id of page that needs to be updated (required)
        :param str site_id: Site Id in which the page needs to be updated (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data', 'content_id', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method page_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `page_update`")  # noqa: E501
        # verify the required parameter 'content_id' is set
        if ('content_id' not in params or
                params['content_id'] is None):
            raise ValueError("Missing the required parameter `content_id` when calling `page_update`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `page_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'content_id' in params:
            query_params.append(('contentId', params['content_id']))  # noqa: E501
        if 'site_id' in params:
            query_params.append(('siteId', params['site_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apex/DataServerRW?target=SiteAddPageDataServer&action=update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_content_from_sites_i_follow(self, data, **kwargs):  # noqa: E501
        """List popular Content from sites I follow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_content_from_sites_i_follow(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PopularContentFollowed data: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_content_from_sites_i_follow_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.search_content_from_sites_i_follow_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def search_content_from_sites_i_follow_with_http_info(self, data, **kwargs):  # noqa: E501
        """List popular Content from sites I follow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_content_from_sites_i_follow_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PopularContentFollowed data: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_content_from_sites_i_follow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `search_content_from_sites_i_follow`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/apex/DataServerRW?target=AllContentDataServer&action=search&', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
