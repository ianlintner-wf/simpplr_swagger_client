# coding: utf-8

"""
    Simpplr APIs

    This collection of Simpplr APIs lets developers create and manage content outside the Simpplr UI. We have APIs for notifications, alerts, app searches, and content creation. Looking for parameters or code samples? Click on an endpoint to see a sample snippet along with descriptions of its parameters and responses.  If you have questions about an API, reach out to us support@simpplr.com  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Activate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ids_array': 'list[str]',
        'make_activated_bool': 'bool'
    }

    attribute_map = {
        'ids_array': 'idsArray',
        'make_activated_bool': 'makeActivatedBool'
    }

    def __init__(self, ids_array=None, make_activated_bool=None):  # noqa: E501
        """Activate - a model defined in Swagger"""  # noqa: E501
        self._ids_array = None
        self._make_activated_bool = None
        self.discriminator = None
        if ids_array is not None:
            self.ids_array = ids_array
        if make_activated_bool is not None:
            self.make_activated_bool = make_activated_bool

    @property
    def ids_array(self):
        """Gets the ids_array of this Activate.  # noqa: E501


        :return: The ids_array of this Activate.  # noqa: E501
        :rtype: list[str]
        """
        return self._ids_array

    @ids_array.setter
    def ids_array(self, ids_array):
        """Sets the ids_array of this Activate.


        :param ids_array: The ids_array of this Activate.  # noqa: E501
        :type: list[str]
        """

        self._ids_array = ids_array

    @property
    def make_activated_bool(self):
        """Gets the make_activated_bool of this Activate.  # noqa: E501


        :return: The make_activated_bool of this Activate.  # noqa: E501
        :rtype: bool
        """
        return self._make_activated_bool

    @make_activated_bool.setter
    def make_activated_bool(self, make_activated_bool):
        """Sets the make_activated_bool of this Activate.


        :param make_activated_bool: The make_activated_bool of this Activate.  # noqa: E501
        :type: bool
        """

        self._make_activated_bool = make_activated_bool

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Activate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Activate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
