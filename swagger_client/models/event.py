# coding: utf-8

"""
    Simpplr APIs

    This collection of Simpplr APIs lets developers create and manage content outside the Simpplr UI. We have APIs for notifications, alerts, app searches, and content creation. Looking for parameters or code samples? Click on an endpoint to see a sample snippet along with descriptions of its parameters and responses.  If you have questions about an API, reach out to us support@simpplr.com  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Event(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authored_by': 'object',
        'content_sub_type': 'str',
        'list_of_files': 'list[str]',
        'publish_at': 'str',
        'body': 'str',
        'site_id': 'str',
        'img_caption': 'str',
        'img': 'str',
        'starts_at': 'str',
        'is_all_day': 'bool',
        'publishing_status': 'str',
        'list_of_inline_images': 'list[str]',
        'list_of_inline_videos': 'list[str]',
        'summary': 'str',
        'publish_to': 'str',
        'ends_at': 'str',
        'timezone_iso': 'str',
        'img_layout': 'str',
        'has_map_url': 'str',
        'list_of_content_topic_ids': 'list[str]',
        'has_directions': 'bool',
        'img_original_file': 'str',
        'map_url': 'str',
        'directions': 'list[str]',
        'img_original': 'str',
        'img_landscape_file': 'str',
        'has_rsvp': 'bool',
        'location': 'str',
        'img_landscape': 'str',
        'title': 'str',
        'language': 'str',
        'list_of_organizers': 'list[str]',
        'is_feed_enabled': 'bool',
        'list_of_topics': 'list[object]',
        'rsvp': 'EventRsvp',
        'img_file': 'str',
        'id': 'str'
    }

    attribute_map = {
        'authored_by': 'authoredBy',
        'content_sub_type': 'contentSubType',
        'list_of_files': 'listOfFiles',
        'publish_at': 'publishAt',
        'body': 'body',
        'site_id': 'siteId',
        'img_caption': 'imgCaption',
        'img': 'img',
        'starts_at': 'startsAt',
        'is_all_day': 'isAllDay',
        'publishing_status': 'publishingStatus',
        'list_of_inline_images': 'listOfInlineImages',
        'list_of_inline_videos': 'listOfInlineVideos',
        'summary': 'summary',
        'publish_to': 'publishTo',
        'ends_at': 'endsAt',
        'timezone_iso': 'timezoneIso',
        'img_layout': 'imgLayout',
        'has_map_url': 'hasMapUrl',
        'list_of_content_topic_ids': 'listOfContentTopicIds',
        'has_directions': 'hasDirections',
        'img_original_file': 'imgOriginalFile',
        'map_url': 'mapUrl',
        'directions': 'directions',
        'img_original': 'imgOriginal',
        'img_landscape_file': 'imgLandscapeFile',
        'has_rsvp': 'hasRsvp',
        'location': 'location',
        'img_landscape': 'imgLandscape',
        'title': 'title',
        'language': 'language',
        'list_of_organizers': 'listOfOrganizers',
        'is_feed_enabled': 'isFeedEnabled',
        'list_of_topics': 'listOfTopics',
        'rsvp': 'rsvp',
        'img_file': 'imgFile',
        'id': 'id'
    }

    def __init__(self, authored_by=None, content_sub_type=None, list_of_files=None, publish_at=None, body=None, site_id=None, img_caption=None, img=None, starts_at=None, is_all_day=None, publishing_status=None, list_of_inline_images=None, list_of_inline_videos=None, summary=None, publish_to=None, ends_at=None, timezone_iso=None, img_layout=None, has_map_url=None, list_of_content_topic_ids=None, has_directions=None, img_original_file=None, map_url=None, directions=None, img_original=None, img_landscape_file=None, has_rsvp=None, location=None, img_landscape=None, title=None, language=None, list_of_organizers=None, is_feed_enabled=None, list_of_topics=None, rsvp=None, img_file=None, id=None):  # noqa: E501
        """Event - a model defined in Swagger"""  # noqa: E501
        self._authored_by = None
        self._content_sub_type = None
        self._list_of_files = None
        self._publish_at = None
        self._body = None
        self._site_id = None
        self._img_caption = None
        self._img = None
        self._starts_at = None
        self._is_all_day = None
        self._publishing_status = None
        self._list_of_inline_images = None
        self._list_of_inline_videos = None
        self._summary = None
        self._publish_to = None
        self._ends_at = None
        self._timezone_iso = None
        self._img_layout = None
        self._has_map_url = None
        self._list_of_content_topic_ids = None
        self._has_directions = None
        self._img_original_file = None
        self._map_url = None
        self._directions = None
        self._img_original = None
        self._img_landscape_file = None
        self._has_rsvp = None
        self._location = None
        self._img_landscape = None
        self._title = None
        self._language = None
        self._list_of_organizers = None
        self._is_feed_enabled = None
        self._list_of_topics = None
        self._rsvp = None
        self._img_file = None
        self._id = None
        self.discriminator = None
        if authored_by is not None:
            self.authored_by = authored_by
        if content_sub_type is not None:
            self.content_sub_type = content_sub_type
        if list_of_files is not None:
            self.list_of_files = list_of_files
        if publish_at is not None:
            self.publish_at = publish_at
        if body is not None:
            self.body = body
        if site_id is not None:
            self.site_id = site_id
        if img_caption is not None:
            self.img_caption = img_caption
        if img is not None:
            self.img = img
        self.starts_at = starts_at
        if is_all_day is not None:
            self.is_all_day = is_all_day
        if publishing_status is not None:
            self.publishing_status = publishing_status
        if list_of_inline_images is not None:
            self.list_of_inline_images = list_of_inline_images
        if list_of_inline_videos is not None:
            self.list_of_inline_videos = list_of_inline_videos
        if summary is not None:
            self.summary = summary
        if publish_to is not None:
            self.publish_to = publish_to
        self.ends_at = ends_at
        if timezone_iso is not None:
            self.timezone_iso = timezone_iso
        if img_layout is not None:
            self.img_layout = img_layout
        if has_map_url is not None:
            self.has_map_url = has_map_url
        if list_of_content_topic_ids is not None:
            self.list_of_content_topic_ids = list_of_content_topic_ids
        if has_directions is not None:
            self.has_directions = has_directions
        if img_original_file is not None:
            self.img_original_file = img_original_file
        if map_url is not None:
            self.map_url = map_url
        if directions is not None:
            self.directions = directions
        if img_original is not None:
            self.img_original = img_original
        if img_landscape_file is not None:
            self.img_landscape_file = img_landscape_file
        if has_rsvp is not None:
            self.has_rsvp = has_rsvp
        self.location = location
        if img_landscape is not None:
            self.img_landscape = img_landscape
        if title is not None:
            self.title = title
        if language is not None:
            self.language = language
        if list_of_organizers is not None:
            self.list_of_organizers = list_of_organizers
        if is_feed_enabled is not None:
            self.is_feed_enabled = is_feed_enabled
        if list_of_topics is not None:
            self.list_of_topics = list_of_topics
        if rsvp is not None:
            self.rsvp = rsvp
        if img_file is not None:
            self.img_file = img_file
        if id is not None:
            self.id = id

    @property
    def authored_by(self):
        """Gets the authored_by of this Event.  # noqa: E501


        :return: The authored_by of this Event.  # noqa: E501
        :rtype: object
        """
        return self._authored_by

    @authored_by.setter
    def authored_by(self, authored_by):
        """Sets the authored_by of this Event.


        :param authored_by: The authored_by of this Event.  # noqa: E501
        :type: object
        """

        self._authored_by = authored_by

    @property
    def content_sub_type(self):
        """Gets the content_sub_type of this Event.  # noqa: E501


        :return: The content_sub_type of this Event.  # noqa: E501
        :rtype: str
        """
        return self._content_sub_type

    @content_sub_type.setter
    def content_sub_type(self, content_sub_type):
        """Sets the content_sub_type of this Event.


        :param content_sub_type: The content_sub_type of this Event.  # noqa: E501
        :type: str
        """

        self._content_sub_type = content_sub_type

    @property
    def list_of_files(self):
        """Gets the list_of_files of this Event.  # noqa: E501


        :return: The list_of_files of this Event.  # noqa: E501
        :rtype: list[str]
        """
        return self._list_of_files

    @list_of_files.setter
    def list_of_files(self, list_of_files):
        """Sets the list_of_files of this Event.


        :param list_of_files: The list_of_files of this Event.  # noqa: E501
        :type: list[str]
        """

        self._list_of_files = list_of_files

    @property
    def publish_at(self):
        """Gets the publish_at of this Event.  # noqa: E501


        :return: The publish_at of this Event.  # noqa: E501
        :rtype: str
        """
        return self._publish_at

    @publish_at.setter
    def publish_at(self, publish_at):
        """Sets the publish_at of this Event.


        :param publish_at: The publish_at of this Event.  # noqa: E501
        :type: str
        """

        self._publish_at = publish_at

    @property
    def body(self):
        """Gets the body of this Event.  # noqa: E501


        :return: The body of this Event.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Event.


        :param body: The body of this Event.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def site_id(self):
        """Gets the site_id of this Event.  # noqa: E501


        :return: The site_id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this Event.


        :param site_id: The site_id of this Event.  # noqa: E501
        :type: str
        """

        self._site_id = site_id

    @property
    def img_caption(self):
        """Gets the img_caption of this Event.  # noqa: E501


        :return: The img_caption of this Event.  # noqa: E501
        :rtype: str
        """
        return self._img_caption

    @img_caption.setter
    def img_caption(self, img_caption):
        """Sets the img_caption of this Event.


        :param img_caption: The img_caption of this Event.  # noqa: E501
        :type: str
        """

        self._img_caption = img_caption

    @property
    def img(self):
        """Gets the img of this Event.  # noqa: E501


        :return: The img of this Event.  # noqa: E501
        :rtype: str
        """
        return self._img

    @img.setter
    def img(self, img):
        """Sets the img of this Event.


        :param img: The img of this Event.  # noqa: E501
        :type: str
        """

        self._img = img

    @property
    def starts_at(self):
        """Gets the starts_at of this Event.  # noqa: E501


        :return: The starts_at of this Event.  # noqa: E501
        :rtype: str
        """
        return self._starts_at

    @starts_at.setter
    def starts_at(self, starts_at):
        """Sets the starts_at of this Event.


        :param starts_at: The starts_at of this Event.  # noqa: E501
        :type: str
        """
        if starts_at is None:
            raise ValueError("Invalid value for `starts_at`, must not be `None`")  # noqa: E501

        self._starts_at = starts_at

    @property
    def is_all_day(self):
        """Gets the is_all_day of this Event.  # noqa: E501


        :return: The is_all_day of this Event.  # noqa: E501
        :rtype: bool
        """
        return self._is_all_day

    @is_all_day.setter
    def is_all_day(self, is_all_day):
        """Sets the is_all_day of this Event.


        :param is_all_day: The is_all_day of this Event.  # noqa: E501
        :type: bool
        """

        self._is_all_day = is_all_day

    @property
    def publishing_status(self):
        """Gets the publishing_status of this Event.  # noqa: E501


        :return: The publishing_status of this Event.  # noqa: E501
        :rtype: str
        """
        return self._publishing_status

    @publishing_status.setter
    def publishing_status(self, publishing_status):
        """Sets the publishing_status of this Event.


        :param publishing_status: The publishing_status of this Event.  # noqa: E501
        :type: str
        """

        self._publishing_status = publishing_status

    @property
    def list_of_inline_images(self):
        """Gets the list_of_inline_images of this Event.  # noqa: E501


        :return: The list_of_inline_images of this Event.  # noqa: E501
        :rtype: list[str]
        """
        return self._list_of_inline_images

    @list_of_inline_images.setter
    def list_of_inline_images(self, list_of_inline_images):
        """Sets the list_of_inline_images of this Event.


        :param list_of_inline_images: The list_of_inline_images of this Event.  # noqa: E501
        :type: list[str]
        """

        self._list_of_inline_images = list_of_inline_images

    @property
    def list_of_inline_videos(self):
        """Gets the list_of_inline_videos of this Event.  # noqa: E501


        :return: The list_of_inline_videos of this Event.  # noqa: E501
        :rtype: list[str]
        """
        return self._list_of_inline_videos

    @list_of_inline_videos.setter
    def list_of_inline_videos(self, list_of_inline_videos):
        """Sets the list_of_inline_videos of this Event.


        :param list_of_inline_videos: The list_of_inline_videos of this Event.  # noqa: E501
        :type: list[str]
        """

        self._list_of_inline_videos = list_of_inline_videos

    @property
    def summary(self):
        """Gets the summary of this Event.  # noqa: E501


        :return: The summary of this Event.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Event.


        :param summary: The summary of this Event.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def publish_to(self):
        """Gets the publish_to of this Event.  # noqa: E501


        :return: The publish_to of this Event.  # noqa: E501
        :rtype: str
        """
        return self._publish_to

    @publish_to.setter
    def publish_to(self, publish_to):
        """Sets the publish_to of this Event.


        :param publish_to: The publish_to of this Event.  # noqa: E501
        :type: str
        """

        self._publish_to = publish_to

    @property
    def ends_at(self):
        """Gets the ends_at of this Event.  # noqa: E501


        :return: The ends_at of this Event.  # noqa: E501
        :rtype: str
        """
        return self._ends_at

    @ends_at.setter
    def ends_at(self, ends_at):
        """Sets the ends_at of this Event.


        :param ends_at: The ends_at of this Event.  # noqa: E501
        :type: str
        """
        if ends_at is None:
            raise ValueError("Invalid value for `ends_at`, must not be `None`")  # noqa: E501

        self._ends_at = ends_at

    @property
    def timezone_iso(self):
        """Gets the timezone_iso of this Event.  # noqa: E501


        :return: The timezone_iso of this Event.  # noqa: E501
        :rtype: str
        """
        return self._timezone_iso

    @timezone_iso.setter
    def timezone_iso(self, timezone_iso):
        """Sets the timezone_iso of this Event.


        :param timezone_iso: The timezone_iso of this Event.  # noqa: E501
        :type: str
        """

        self._timezone_iso = timezone_iso

    @property
    def img_layout(self):
        """Gets the img_layout of this Event.  # noqa: E501


        :return: The img_layout of this Event.  # noqa: E501
        :rtype: str
        """
        return self._img_layout

    @img_layout.setter
    def img_layout(self, img_layout):
        """Sets the img_layout of this Event.


        :param img_layout: The img_layout of this Event.  # noqa: E501
        :type: str
        """

        self._img_layout = img_layout

    @property
    def has_map_url(self):
        """Gets the has_map_url of this Event.  # noqa: E501


        :return: The has_map_url of this Event.  # noqa: E501
        :rtype: str
        """
        return self._has_map_url

    @has_map_url.setter
    def has_map_url(self, has_map_url):
        """Sets the has_map_url of this Event.


        :param has_map_url: The has_map_url of this Event.  # noqa: E501
        :type: str
        """

        self._has_map_url = has_map_url

    @property
    def list_of_content_topic_ids(self):
        """Gets the list_of_content_topic_ids of this Event.  # noqa: E501


        :return: The list_of_content_topic_ids of this Event.  # noqa: E501
        :rtype: list[str]
        """
        return self._list_of_content_topic_ids

    @list_of_content_topic_ids.setter
    def list_of_content_topic_ids(self, list_of_content_topic_ids):
        """Sets the list_of_content_topic_ids of this Event.


        :param list_of_content_topic_ids: The list_of_content_topic_ids of this Event.  # noqa: E501
        :type: list[str]
        """

        self._list_of_content_topic_ids = list_of_content_topic_ids

    @property
    def has_directions(self):
        """Gets the has_directions of this Event.  # noqa: E501


        :return: The has_directions of this Event.  # noqa: E501
        :rtype: bool
        """
        return self._has_directions

    @has_directions.setter
    def has_directions(self, has_directions):
        """Sets the has_directions of this Event.


        :param has_directions: The has_directions of this Event.  # noqa: E501
        :type: bool
        """

        self._has_directions = has_directions

    @property
    def img_original_file(self):
        """Gets the img_original_file of this Event.  # noqa: E501


        :return: The img_original_file of this Event.  # noqa: E501
        :rtype: str
        """
        return self._img_original_file

    @img_original_file.setter
    def img_original_file(self, img_original_file):
        """Sets the img_original_file of this Event.


        :param img_original_file: The img_original_file of this Event.  # noqa: E501
        :type: str
        """

        self._img_original_file = img_original_file

    @property
    def map_url(self):
        """Gets the map_url of this Event.  # noqa: E501


        :return: The map_url of this Event.  # noqa: E501
        :rtype: str
        """
        return self._map_url

    @map_url.setter
    def map_url(self, map_url):
        """Sets the map_url of this Event.


        :param map_url: The map_url of this Event.  # noqa: E501
        :type: str
        """

        self._map_url = map_url

    @property
    def directions(self):
        """Gets the directions of this Event.  # noqa: E501


        :return: The directions of this Event.  # noqa: E501
        :rtype: list[str]
        """
        return self._directions

    @directions.setter
    def directions(self, directions):
        """Sets the directions of this Event.


        :param directions: The directions of this Event.  # noqa: E501
        :type: list[str]
        """

        self._directions = directions

    @property
    def img_original(self):
        """Gets the img_original of this Event.  # noqa: E501


        :return: The img_original of this Event.  # noqa: E501
        :rtype: str
        """
        return self._img_original

    @img_original.setter
    def img_original(self, img_original):
        """Sets the img_original of this Event.


        :param img_original: The img_original of this Event.  # noqa: E501
        :type: str
        """

        self._img_original = img_original

    @property
    def img_landscape_file(self):
        """Gets the img_landscape_file of this Event.  # noqa: E501


        :return: The img_landscape_file of this Event.  # noqa: E501
        :rtype: str
        """
        return self._img_landscape_file

    @img_landscape_file.setter
    def img_landscape_file(self, img_landscape_file):
        """Sets the img_landscape_file of this Event.


        :param img_landscape_file: The img_landscape_file of this Event.  # noqa: E501
        :type: str
        """

        self._img_landscape_file = img_landscape_file

    @property
    def has_rsvp(self):
        """Gets the has_rsvp of this Event.  # noqa: E501


        :return: The has_rsvp of this Event.  # noqa: E501
        :rtype: bool
        """
        return self._has_rsvp

    @has_rsvp.setter
    def has_rsvp(self, has_rsvp):
        """Sets the has_rsvp of this Event.


        :param has_rsvp: The has_rsvp of this Event.  # noqa: E501
        :type: bool
        """

        self._has_rsvp = has_rsvp

    @property
    def location(self):
        """Gets the location of this Event.  # noqa: E501


        :return: The location of this Event.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Event.


        :param location: The location of this Event.  # noqa: E501
        :type: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def img_landscape(self):
        """Gets the img_landscape of this Event.  # noqa: E501


        :return: The img_landscape of this Event.  # noqa: E501
        :rtype: str
        """
        return self._img_landscape

    @img_landscape.setter
    def img_landscape(self, img_landscape):
        """Sets the img_landscape of this Event.


        :param img_landscape: The img_landscape of this Event.  # noqa: E501
        :type: str
        """

        self._img_landscape = img_landscape

    @property
    def title(self):
        """Gets the title of this Event.  # noqa: E501


        :return: The title of this Event.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Event.


        :param title: The title of this Event.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def language(self):
        """Gets the language of this Event.  # noqa: E501


        :return: The language of this Event.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Event.


        :param language: The language of this Event.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def list_of_organizers(self):
        """Gets the list_of_organizers of this Event.  # noqa: E501


        :return: The list_of_organizers of this Event.  # noqa: E501
        :rtype: list[str]
        """
        return self._list_of_organizers

    @list_of_organizers.setter
    def list_of_organizers(self, list_of_organizers):
        """Sets the list_of_organizers of this Event.


        :param list_of_organizers: The list_of_organizers of this Event.  # noqa: E501
        :type: list[str]
        """

        self._list_of_organizers = list_of_organizers

    @property
    def is_feed_enabled(self):
        """Gets the is_feed_enabled of this Event.  # noqa: E501


        :return: The is_feed_enabled of this Event.  # noqa: E501
        :rtype: bool
        """
        return self._is_feed_enabled

    @is_feed_enabled.setter
    def is_feed_enabled(self, is_feed_enabled):
        """Sets the is_feed_enabled of this Event.


        :param is_feed_enabled: The is_feed_enabled of this Event.  # noqa: E501
        :type: bool
        """

        self._is_feed_enabled = is_feed_enabled

    @property
    def list_of_topics(self):
        """Gets the list_of_topics of this Event.  # noqa: E501


        :return: The list_of_topics of this Event.  # noqa: E501
        :rtype: list[object]
        """
        return self._list_of_topics

    @list_of_topics.setter
    def list_of_topics(self, list_of_topics):
        """Sets the list_of_topics of this Event.


        :param list_of_topics: The list_of_topics of this Event.  # noqa: E501
        :type: list[object]
        """

        self._list_of_topics = list_of_topics

    @property
    def rsvp(self):
        """Gets the rsvp of this Event.  # noqa: E501


        :return: The rsvp of this Event.  # noqa: E501
        :rtype: EventRsvp
        """
        return self._rsvp

    @rsvp.setter
    def rsvp(self, rsvp):
        """Sets the rsvp of this Event.


        :param rsvp: The rsvp of this Event.  # noqa: E501
        :type: EventRsvp
        """

        self._rsvp = rsvp

    @property
    def img_file(self):
        """Gets the img_file of this Event.  # noqa: E501


        :return: The img_file of this Event.  # noqa: E501
        :rtype: str
        """
        return self._img_file

    @img_file.setter
    def img_file(self, img_file):
        """Sets the img_file of this Event.


        :param img_file: The img_file of this Event.  # noqa: E501
        :type: str
        """

        self._img_file = img_file

    @property
    def id(self):
        """Gets the id of this Event.  # noqa: E501


        :return: The id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.


        :param id: The id of this Event.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Event, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
