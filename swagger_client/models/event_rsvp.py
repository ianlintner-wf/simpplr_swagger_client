# coding: utf-8

"""
    Simpplr APIs

    This collection of Simpplr APIs lets developers create and manage content outside the Simpplr UI. We have APIs for notifications, alerts, app searches, and content creation. Looking for parameters or code samples? Click on an endpoint to see a sample snippet along with descriptions of its parameters and responses.  If you have questions about an API, reach out to us support@simpplr.com  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventRsvp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'due_at_date': 'str',
        'capacity_count': 'int'
    }

    attribute_map = {
        'due_at_date': 'dueAtDate',
        'capacity_count': 'capacityCount'
    }

    def __init__(self, due_at_date=None, capacity_count=None):  # noqa: E501
        """EventRsvp - a model defined in Swagger"""  # noqa: E501
        self._due_at_date = None
        self._capacity_count = None
        self.discriminator = None
        if due_at_date is not None:
            self.due_at_date = due_at_date
        if capacity_count is not None:
            self.capacity_count = capacity_count

    @property
    def due_at_date(self):
        """Gets the due_at_date of this EventRsvp.  # noqa: E501


        :return: The due_at_date of this EventRsvp.  # noqa: E501
        :rtype: str
        """
        return self._due_at_date

    @due_at_date.setter
    def due_at_date(self, due_at_date):
        """Sets the due_at_date of this EventRsvp.


        :param due_at_date: The due_at_date of this EventRsvp.  # noqa: E501
        :type: str
        """

        self._due_at_date = due_at_date

    @property
    def capacity_count(self):
        """Gets the capacity_count of this EventRsvp.  # noqa: E501


        :return: The capacity_count of this EventRsvp.  # noqa: E501
        :rtype: int
        """
        return self._capacity_count

    @capacity_count.setter
    def capacity_count(self, capacity_count):
        """Sets the capacity_count of this EventRsvp.


        :param capacity_count: The capacity_count of this EventRsvp.  # noqa: E501
        :type: int
        """

        self._capacity_count = capacity_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventRsvp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventRsvp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
