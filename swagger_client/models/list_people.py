# coding: utf-8

"""
    Simpplr APIs

    This collection of Simpplr APIs lets developers create and manage content outside the Simpplr UI. We have APIs for notifications, alerts, app searches, and content creation. Looking for parameters or code samples? Click on an endpoint to see a sample snippet along with descriptions of its parameters and responses.  If you have questions about an API, reach out to us support@simpplr.com  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ListPeople(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'size': 'str',
        'term': 'str',
        'department': 'str',
        'location': 'str',
        'user_category': 'str',
        'expertise': 'str',
        'limit_to_subsegment': 'bool',
        'sort_by': 'str',
        'include_total': 'bool'
    }

    attribute_map = {
        'size': 'size',
        'term': 'term',
        'department': 'department',
        'location': 'location',
        'user_category': 'userCategory',
        'expertise': 'expertise',
        'limit_to_subsegment': 'limitToSubsegment',
        'sort_by': 'sortBy',
        'include_total': 'includeTotal'
    }

    def __init__(self, size=None, term=None, department=None, location=None, user_category=None, expertise=None, limit_to_subsegment=None, sort_by=None, include_total=None):  # noqa: E501
        """ListPeople - a model defined in Swagger"""  # noqa: E501
        self._size = None
        self._term = None
        self._department = None
        self._location = None
        self._user_category = None
        self._expertise = None
        self._limit_to_subsegment = None
        self._sort_by = None
        self._include_total = None
        self.discriminator = None
        self.size = size
        if term is not None:
            self.term = term
        if department is not None:
            self.department = department
        if location is not None:
            self.location = location
        if user_category is not None:
            self.user_category = user_category
        if expertise is not None:
            self.expertise = expertise
        if limit_to_subsegment is not None:
            self.limit_to_subsegment = limit_to_subsegment
        if sort_by is not None:
            self.sort_by = sort_by
        if include_total is not None:
            self.include_total = include_total

    @property
    def size(self):
        """Gets the size of this ListPeople.  # noqa: E501


        :return: The size of this ListPeople.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ListPeople.


        :param size: The size of this ListPeople.  # noqa: E501
        :type: str
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def term(self):
        """Gets the term of this ListPeople.  # noqa: E501


        :return: The term of this ListPeople.  # noqa: E501
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this ListPeople.


        :param term: The term of this ListPeople.  # noqa: E501
        :type: str
        """

        self._term = term

    @property
    def department(self):
        """Gets the department of this ListPeople.  # noqa: E501


        :return: The department of this ListPeople.  # noqa: E501
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this ListPeople.


        :param department: The department of this ListPeople.  # noqa: E501
        :type: str
        """

        self._department = department

    @property
    def location(self):
        """Gets the location of this ListPeople.  # noqa: E501


        :return: The location of this ListPeople.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ListPeople.


        :param location: The location of this ListPeople.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def user_category(self):
        """Gets the user_category of this ListPeople.  # noqa: E501


        :return: The user_category of this ListPeople.  # noqa: E501
        :rtype: str
        """
        return self._user_category

    @user_category.setter
    def user_category(self, user_category):
        """Sets the user_category of this ListPeople.


        :param user_category: The user_category of this ListPeople.  # noqa: E501
        :type: str
        """

        self._user_category = user_category

    @property
    def expertise(self):
        """Gets the expertise of this ListPeople.  # noqa: E501


        :return: The expertise of this ListPeople.  # noqa: E501
        :rtype: str
        """
        return self._expertise

    @expertise.setter
    def expertise(self, expertise):
        """Sets the expertise of this ListPeople.


        :param expertise: The expertise of this ListPeople.  # noqa: E501
        :type: str
        """

        self._expertise = expertise

    @property
    def limit_to_subsegment(self):
        """Gets the limit_to_subsegment of this ListPeople.  # noqa: E501


        :return: The limit_to_subsegment of this ListPeople.  # noqa: E501
        :rtype: bool
        """
        return self._limit_to_subsegment

    @limit_to_subsegment.setter
    def limit_to_subsegment(self, limit_to_subsegment):
        """Sets the limit_to_subsegment of this ListPeople.


        :param limit_to_subsegment: The limit_to_subsegment of this ListPeople.  # noqa: E501
        :type: bool
        """

        self._limit_to_subsegment = limit_to_subsegment

    @property
    def sort_by(self):
        """Gets the sort_by of this ListPeople.  # noqa: E501


        :return: The sort_by of this ListPeople.  # noqa: E501
        :rtype: str
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this ListPeople.


        :param sort_by: The sort_by of this ListPeople.  # noqa: E501
        :type: str
        """

        self._sort_by = sort_by

    @property
    def include_total(self):
        """Gets the include_total of this ListPeople.  # noqa: E501


        :return: The include_total of this ListPeople.  # noqa: E501
        :rtype: bool
        """
        return self._include_total

    @include_total.setter
    def include_total(self, include_total):
        """Sets the include_total of this ListPeople.


        :param include_total: The include_total of this ListPeople.  # noqa: E501
        :type: bool
        """

        self._include_total = include_total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListPeople, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListPeople):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
