# coding: utf-8

"""
    Simpplr APIs

    This collection of Simpplr APIs lets developers create and manage content outside the Simpplr UI. We have APIs for notifications, alerts, app searches, and content creation. Looking for parameters or code samples? Click on an endpoint to see a sample snippet along with descriptions of its parameters and responses.  If you have questions about an API, reach out to us support@simpplr.com  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NotificationActioned(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'property_name': 'str',
        'action_by': 'str',
        'action_at': 'str',
        'is_deleted': 'bool'
    }

    attribute_map = {
        'property_name': 'propertyName',
        'action_by': 'actionBy',
        'action_at': 'actionAt',
        'is_deleted': 'isDeleted'
    }

    def __init__(self, property_name=None, action_by=None, action_at=None, is_deleted=None):  # noqa: E501
        """NotificationActioned - a model defined in Swagger"""  # noqa: E501
        self._property_name = None
        self._action_by = None
        self._action_at = None
        self._is_deleted = None
        self.discriminator = None
        self.property_name = property_name
        self.action_by = action_by
        self.action_at = action_at
        if is_deleted is not None:
            self.is_deleted = is_deleted

    @property
    def property_name(self):
        """Gets the property_name of this NotificationActioned.  # noqa: E501


        :return: The property_name of this NotificationActioned.  # noqa: E501
        :rtype: str
        """
        return self._property_name

    @property_name.setter
    def property_name(self, property_name):
        """Sets the property_name of this NotificationActioned.


        :param property_name: The property_name of this NotificationActioned.  # noqa: E501
        :type: str
        """
        if property_name is None:
            raise ValueError("Invalid value for `property_name`, must not be `None`")  # noqa: E501

        self._property_name = property_name

    @property
    def action_by(self):
        """Gets the action_by of this NotificationActioned.  # noqa: E501


        :return: The action_by of this NotificationActioned.  # noqa: E501
        :rtype: str
        """
        return self._action_by

    @action_by.setter
    def action_by(self, action_by):
        """Sets the action_by of this NotificationActioned.


        :param action_by: The action_by of this NotificationActioned.  # noqa: E501
        :type: str
        """
        if action_by is None:
            raise ValueError("Invalid value for `action_by`, must not be `None`")  # noqa: E501

        self._action_by = action_by

    @property
    def action_at(self):
        """Gets the action_at of this NotificationActioned.  # noqa: E501


        :return: The action_at of this NotificationActioned.  # noqa: E501
        :rtype: str
        """
        return self._action_at

    @action_at.setter
    def action_at(self, action_at):
        """Sets the action_at of this NotificationActioned.


        :param action_at: The action_at of this NotificationActioned.  # noqa: E501
        :type: str
        """
        if action_at is None:
            raise ValueError("Invalid value for `action_at`, must not be `None`")  # noqa: E501

        self._action_at = action_at

    @property
    def is_deleted(self):
        """Gets the is_deleted of this NotificationActioned.  # noqa: E501


        :return: The is_deleted of this NotificationActioned.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this NotificationActioned.


        :param is_deleted: The is_deleted of this NotificationActioned.  # noqa: E501
        :type: bool
        """

        self._is_deleted = is_deleted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationActioned, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationActioned):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
