# coding: utf-8

"""
    Simpplr APIs

    This collection of Simpplr APIs lets developers create and manage content outside the Simpplr UI. We have APIs for notifications, alerts, app searches, and content creation. Looking for parameters or code samples? Click on an endpoint to see a sample snippet along with descriptions of its parameters and responses.  If you have questions about an API, reach out to us support@simpplr.com  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Page(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authored_by': 'object',
        'content_sub_type': 'str',
        'list_of_files': 'list[object]',
        'publish_at': 'str',
        'body': 'str',
        'site_id': 'str',
        'summary': 'str',
        'publish_to': 'str',
        'img_original_file': 'object',
        'img_original': 'str',
        'img_landscape_file': 'object',
        'img_landscape': 'str',
        'title': 'str',
        'is_feed_enabled': 'bool',
        'category': 'object',
        'img_file': 'object'
    }

    attribute_map = {
        'authored_by': 'authoredBy',
        'content_sub_type': 'contentSubType',
        'list_of_files': 'listOfFiles',
        'publish_at': 'publishAt',
        'body': 'body',
        'site_id': 'siteId',
        'summary': 'summary',
        'publish_to': 'publishTo',
        'img_original_file': 'imgOriginalFile',
        'img_original': 'imgOriginal',
        'img_landscape_file': 'imgLandscapeFile',
        'img_landscape': 'imgLandscape',
        'title': 'title',
        'is_feed_enabled': 'isFeedEnabled',
        'category': 'category',
        'img_file': 'imgFile'
    }

    def __init__(self, authored_by=None, content_sub_type=None, list_of_files=None, publish_at=None, body=None, site_id=None, summary=None, publish_to=None, img_original_file=None, img_original=None, img_landscape_file=None, img_landscape=None, title=None, is_feed_enabled=None, category=None, img_file=None):  # noqa: E501
        """Page - a model defined in Swagger"""  # noqa: E501
        self._authored_by = None
        self._content_sub_type = None
        self._list_of_files = None
        self._publish_at = None
        self._body = None
        self._site_id = None
        self._summary = None
        self._publish_to = None
        self._img_original_file = None
        self._img_original = None
        self._img_landscape_file = None
        self._img_landscape = None
        self._title = None
        self._is_feed_enabled = None
        self._category = None
        self._img_file = None
        self.discriminator = None
        if authored_by is not None:
            self.authored_by = authored_by
        self.content_sub_type = content_sub_type
        if list_of_files is not None:
            self.list_of_files = list_of_files
        self.publish_at = publish_at
        if body is not None:
            self.body = body
        self.site_id = site_id
        if summary is not None:
            self.summary = summary
        if publish_to is not None:
            self.publish_to = publish_to
        if img_original_file is not None:
            self.img_original_file = img_original_file
        if img_original is not None:
            self.img_original = img_original
        if img_landscape_file is not None:
            self.img_landscape_file = img_landscape_file
        if img_landscape is not None:
            self.img_landscape = img_landscape
        if title is not None:
            self.title = title
        if is_feed_enabled is not None:
            self.is_feed_enabled = is_feed_enabled
        self.category = category
        if img_file is not None:
            self.img_file = img_file

    @property
    def authored_by(self):
        """Gets the authored_by of this Page.  # noqa: E501


        :return: The authored_by of this Page.  # noqa: E501
        :rtype: object
        """
        return self._authored_by

    @authored_by.setter
    def authored_by(self, authored_by):
        """Sets the authored_by of this Page.


        :param authored_by: The authored_by of this Page.  # noqa: E501
        :type: object
        """

        self._authored_by = authored_by

    @property
    def content_sub_type(self):
        """Gets the content_sub_type of this Page.  # noqa: E501


        :return: The content_sub_type of this Page.  # noqa: E501
        :rtype: str
        """
        return self._content_sub_type

    @content_sub_type.setter
    def content_sub_type(self, content_sub_type):
        """Sets the content_sub_type of this Page.


        :param content_sub_type: The content_sub_type of this Page.  # noqa: E501
        :type: str
        """
        if content_sub_type is None:
            raise ValueError("Invalid value for `content_sub_type`, must not be `None`")  # noqa: E501

        self._content_sub_type = content_sub_type

    @property
    def list_of_files(self):
        """Gets the list_of_files of this Page.  # noqa: E501


        :return: The list_of_files of this Page.  # noqa: E501
        :rtype: list[object]
        """
        return self._list_of_files

    @list_of_files.setter
    def list_of_files(self, list_of_files):
        """Sets the list_of_files of this Page.


        :param list_of_files: The list_of_files of this Page.  # noqa: E501
        :type: list[object]
        """

        self._list_of_files = list_of_files

    @property
    def publish_at(self):
        """Gets the publish_at of this Page.  # noqa: E501


        :return: The publish_at of this Page.  # noqa: E501
        :rtype: str
        """
        return self._publish_at

    @publish_at.setter
    def publish_at(self, publish_at):
        """Sets the publish_at of this Page.


        :param publish_at: The publish_at of this Page.  # noqa: E501
        :type: str
        """
        if publish_at is None:
            raise ValueError("Invalid value for `publish_at`, must not be `None`")  # noqa: E501

        self._publish_at = publish_at

    @property
    def body(self):
        """Gets the body of this Page.  # noqa: E501


        :return: The body of this Page.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Page.


        :param body: The body of this Page.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def site_id(self):
        """Gets the site_id of this Page.  # noqa: E501


        :return: The site_id of this Page.  # noqa: E501
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this Page.


        :param site_id: The site_id of this Page.  # noqa: E501
        :type: str
        """
        if site_id is None:
            raise ValueError("Invalid value for `site_id`, must not be `None`")  # noqa: E501

        self._site_id = site_id

    @property
    def summary(self):
        """Gets the summary of this Page.  # noqa: E501


        :return: The summary of this Page.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Page.


        :param summary: The summary of this Page.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def publish_to(self):
        """Gets the publish_to of this Page.  # noqa: E501


        :return: The publish_to of this Page.  # noqa: E501
        :rtype: str
        """
        return self._publish_to

    @publish_to.setter
    def publish_to(self, publish_to):
        """Sets the publish_to of this Page.


        :param publish_to: The publish_to of this Page.  # noqa: E501
        :type: str
        """

        self._publish_to = publish_to

    @property
    def img_original_file(self):
        """Gets the img_original_file of this Page.  # noqa: E501


        :return: The img_original_file of this Page.  # noqa: E501
        :rtype: object
        """
        return self._img_original_file

    @img_original_file.setter
    def img_original_file(self, img_original_file):
        """Sets the img_original_file of this Page.


        :param img_original_file: The img_original_file of this Page.  # noqa: E501
        :type: object
        """

        self._img_original_file = img_original_file

    @property
    def img_original(self):
        """Gets the img_original of this Page.  # noqa: E501


        :return: The img_original of this Page.  # noqa: E501
        :rtype: str
        """
        return self._img_original

    @img_original.setter
    def img_original(self, img_original):
        """Sets the img_original of this Page.


        :param img_original: The img_original of this Page.  # noqa: E501
        :type: str
        """

        self._img_original = img_original

    @property
    def img_landscape_file(self):
        """Gets the img_landscape_file of this Page.  # noqa: E501


        :return: The img_landscape_file of this Page.  # noqa: E501
        :rtype: object
        """
        return self._img_landscape_file

    @img_landscape_file.setter
    def img_landscape_file(self, img_landscape_file):
        """Sets the img_landscape_file of this Page.


        :param img_landscape_file: The img_landscape_file of this Page.  # noqa: E501
        :type: object
        """

        self._img_landscape_file = img_landscape_file

    @property
    def img_landscape(self):
        """Gets the img_landscape of this Page.  # noqa: E501


        :return: The img_landscape of this Page.  # noqa: E501
        :rtype: str
        """
        return self._img_landscape

    @img_landscape.setter
    def img_landscape(self, img_landscape):
        """Sets the img_landscape of this Page.


        :param img_landscape: The img_landscape of this Page.  # noqa: E501
        :type: str
        """

        self._img_landscape = img_landscape

    @property
    def title(self):
        """Gets the title of this Page.  # noqa: E501


        :return: The title of this Page.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Page.


        :param title: The title of this Page.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def is_feed_enabled(self):
        """Gets the is_feed_enabled of this Page.  # noqa: E501


        :return: The is_feed_enabled of this Page.  # noqa: E501
        :rtype: bool
        """
        return self._is_feed_enabled

    @is_feed_enabled.setter
    def is_feed_enabled(self, is_feed_enabled):
        """Sets the is_feed_enabled of this Page.


        :param is_feed_enabled: The is_feed_enabled of this Page.  # noqa: E501
        :type: bool
        """

        self._is_feed_enabled = is_feed_enabled

    @property
    def category(self):
        """Gets the category of this Page.  # noqa: E501


        :return: The category of this Page.  # noqa: E501
        :rtype: object
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Page.


        :param category: The category of this Page.  # noqa: E501
        :type: object
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def img_file(self):
        """Gets the img_file of this Page.  # noqa: E501


        :return: The img_file of this Page.  # noqa: E501
        :rtype: object
        """
        return self._img_file

    @img_file.setter
    def img_file(self, img_file):
        """Sets the img_file of this Page.


        :param img_file: The img_file of this Page.  # noqa: E501
        :type: object
        """

        self._img_file = img_file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Page, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Page):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
