# coding: utf-8

"""
    Simpplr APIs

    This collection of Simpplr APIs lets developers create and manage content outside the Simpplr UI. We have APIs for notifications, alerts, app searches, and content creation. Looking for parameters or code samples? Click on an endpoint to see a sample snippet along with descriptions of its parameters and responses.  If you have questions about an API, reach out to us support@simpplr.com  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SiteCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access': 'str',
        'landing_page': 'str',
        'is_content_submissions_enabled': 'bool',
        'is_owner': 'bool',
        'has_pages': 'bool',
        'name': 'str',
        'has_events': 'bool',
        'has_dashboard': 'bool',
        'has_albums': 'bool'
    }

    attribute_map = {
        'access': 'access',
        'landing_page': 'landingPage',
        'is_content_submissions_enabled': 'isContentSubmissionsEnabled',
        'is_owner': 'isOwner',
        'has_pages': 'hasPages',
        'name': 'name',
        'has_events': 'hasEvents',
        'has_dashboard': 'hasDashboard',
        'has_albums': 'hasAlbums'
    }

    def __init__(self, access=None, landing_page=None, is_content_submissions_enabled=None, is_owner=None, has_pages=None, name=None, has_events=None, has_dashboard=None, has_albums=None):  # noqa: E501
        """SiteCreate - a model defined in Swagger"""  # noqa: E501
        self._access = None
        self._landing_page = None
        self._is_content_submissions_enabled = None
        self._is_owner = None
        self._has_pages = None
        self._name = None
        self._has_events = None
        self._has_dashboard = None
        self._has_albums = None
        self.discriminator = None
        if access is not None:
            self.access = access
        if landing_page is not None:
            self.landing_page = landing_page
        if is_content_submissions_enabled is not None:
            self.is_content_submissions_enabled = is_content_submissions_enabled
        if is_owner is not None:
            self.is_owner = is_owner
        if has_pages is not None:
            self.has_pages = has_pages
        if name is not None:
            self.name = name
        if has_events is not None:
            self.has_events = has_events
        if has_dashboard is not None:
            self.has_dashboard = has_dashboard
        if has_albums is not None:
            self.has_albums = has_albums

    @property
    def access(self):
        """Gets the access of this SiteCreate.  # noqa: E501


        :return: The access of this SiteCreate.  # noqa: E501
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this SiteCreate.


        :param access: The access of this SiteCreate.  # noqa: E501
        :type: str
        """

        self._access = access

    @property
    def landing_page(self):
        """Gets the landing_page of this SiteCreate.  # noqa: E501


        :return: The landing_page of this SiteCreate.  # noqa: E501
        :rtype: str
        """
        return self._landing_page

    @landing_page.setter
    def landing_page(self, landing_page):
        """Sets the landing_page of this SiteCreate.


        :param landing_page: The landing_page of this SiteCreate.  # noqa: E501
        :type: str
        """

        self._landing_page = landing_page

    @property
    def is_content_submissions_enabled(self):
        """Gets the is_content_submissions_enabled of this SiteCreate.  # noqa: E501


        :return: The is_content_submissions_enabled of this SiteCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_content_submissions_enabled

    @is_content_submissions_enabled.setter
    def is_content_submissions_enabled(self, is_content_submissions_enabled):
        """Sets the is_content_submissions_enabled of this SiteCreate.


        :param is_content_submissions_enabled: The is_content_submissions_enabled of this SiteCreate.  # noqa: E501
        :type: bool
        """

        self._is_content_submissions_enabled = is_content_submissions_enabled

    @property
    def is_owner(self):
        """Gets the is_owner of this SiteCreate.  # noqa: E501


        :return: The is_owner of this SiteCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_owner

    @is_owner.setter
    def is_owner(self, is_owner):
        """Sets the is_owner of this SiteCreate.


        :param is_owner: The is_owner of this SiteCreate.  # noqa: E501
        :type: bool
        """

        self._is_owner = is_owner

    @property
    def has_pages(self):
        """Gets the has_pages of this SiteCreate.  # noqa: E501


        :return: The has_pages of this SiteCreate.  # noqa: E501
        :rtype: bool
        """
        return self._has_pages

    @has_pages.setter
    def has_pages(self, has_pages):
        """Sets the has_pages of this SiteCreate.


        :param has_pages: The has_pages of this SiteCreate.  # noqa: E501
        :type: bool
        """

        self._has_pages = has_pages

    @property
    def name(self):
        """Gets the name of this SiteCreate.  # noqa: E501


        :return: The name of this SiteCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SiteCreate.


        :param name: The name of this SiteCreate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def has_events(self):
        """Gets the has_events of this SiteCreate.  # noqa: E501


        :return: The has_events of this SiteCreate.  # noqa: E501
        :rtype: bool
        """
        return self._has_events

    @has_events.setter
    def has_events(self, has_events):
        """Sets the has_events of this SiteCreate.


        :param has_events: The has_events of this SiteCreate.  # noqa: E501
        :type: bool
        """

        self._has_events = has_events

    @property
    def has_dashboard(self):
        """Gets the has_dashboard of this SiteCreate.  # noqa: E501


        :return: The has_dashboard of this SiteCreate.  # noqa: E501
        :rtype: bool
        """
        return self._has_dashboard

    @has_dashboard.setter
    def has_dashboard(self, has_dashboard):
        """Sets the has_dashboard of this SiteCreate.


        :param has_dashboard: The has_dashboard of this SiteCreate.  # noqa: E501
        :type: bool
        """

        self._has_dashboard = has_dashboard

    @property
    def has_albums(self):
        """Gets the has_albums of this SiteCreate.  # noqa: E501


        :return: The has_albums of this SiteCreate.  # noqa: E501
        :rtype: bool
        """
        return self._has_albums

    @has_albums.setter
    def has_albums(self, has_albums):
        """Sets the has_albums of this SiteCreate.


        :param has_albums: The has_albums of this SiteCreate.  # noqa: E501
        :type: bool
        """

        self._has_albums = has_albums

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SiteCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SiteCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
