# coding: utf-8

"""
    Simpplr APIs

    This collection of Simpplr APIs lets developers create and manage content outside the Simpplr UI. We have APIs for notifications, alerts, app searches, and content creation. Looking for parameters or code samples? Click on an endpoint to see a sample snippet along with descriptions of its parameters and responses.  If you have questions about an API, reach out to us support@simpplr.com  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SiteEdit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_access_requested': 'bool',
        'manager_count': 'int',
        'site_id': 'str',
        'can_create_album': 'bool',
        'has_albums_enabled': 'bool',
        'is_manager': 'bool',
        'img': 'str',
        'access': 'str',
        'cover_image': 'str',
        'edit_url': 'str',
        'landing_page': 'str',
        'analytics': 'SiteEditAnalytics',
        'is_in_mandatory_subscription': 'bool',
        'is_listed': 'bool',
        'is_follower': 'bool',
        'img_thumbnail': 'str',
        'is_content_submissions_enabled': 'bool',
        'is_owner': 'bool',
        'has_pages': 'bool',
        'name': 'str',
        'is_chatter_group_only': 'bool',
        'information_title': 'str',
        'information': 'str',
        'storage_provider': 'str',
        'dropbox_root_permission': 'str',
        'can_create_event': 'bool',
        'has_events_enabled': 'bool',
        'url': 'str',
        'is_active': 'bool',
        'slack': 'str',
        'total_member_count': 'int',
        'chatter_group_id': 'str',
        'follower_count': 'int',
        'is_public': 'bool',
        'has_events': 'bool',
        'is_content_feed_enabled': 'bool',
        'member_count': 'int',
        'teams': 'bool',
        'can_activate_deactivate': 'bool',
        'has_pages_enabled': 'bool',
        'is_broadcast': 'bool',
        'is_featured': 'bool',
        'is_private': 'bool',
        'has_dashboard': 'bool',
        'can_edit': 'bool',
        'has_any_content_enabled': 'bool',
        'can_mention': 'bool',
        'id': 'str',
        'created_at': 'str',
        'can_create_page': 'bool',
        'description': 'str',
        'is_favorited': 'bool',
        'is_content_manager': 'bool',
        'category': 'SiteEditCategory',
        'dashboard_layout': 'str',
        'has_albums': 'bool',
        'has_content': 'bool',
        'img_file': 'str'
    }

    attribute_map = {
        'is_access_requested': 'isAccessRequested',
        'manager_count': 'managerCount',
        'site_id': 'siteId',
        'can_create_album': 'canCreateAlbum',
        'has_albums_enabled': 'hasAlbumsEnabled',
        'is_manager': 'isManager',
        'img': 'img',
        'access': 'access',
        'cover_image': 'coverImage',
        'edit_url': 'editUrl',
        'landing_page': 'landingPage',
        'analytics': 'analytics',
        'is_in_mandatory_subscription': 'isInMandatorySubscription',
        'is_listed': 'isListed',
        'is_follower': 'isFollower',
        'img_thumbnail': 'imgThumbnail',
        'is_content_submissions_enabled': 'isContentSubmissionsEnabled',
        'is_owner': 'isOwner',
        'has_pages': 'hasPages',
        'name': 'name',
        'is_chatter_group_only': 'isChatterGroupOnly',
        'information_title': 'informationTitle',
        'information': 'information',
        'storage_provider': 'storageProvider',
        'dropbox_root_permission': 'dropboxRootPermission',
        'can_create_event': 'canCreateEvent',
        'has_events_enabled': 'hasEventsEnabled',
        'url': 'url',
        'is_active': 'isActive',
        'slack': 'slack',
        'total_member_count': 'totalMemberCount',
        'chatter_group_id': 'chatterGroupId',
        'follower_count': 'followerCount',
        'is_public': 'isPublic',
        'has_events': 'hasEvents',
        'is_content_feed_enabled': 'isContentFeedEnabled',
        'member_count': 'memberCount',
        'teams': 'teams',
        'can_activate_deactivate': 'canActivateDeactivate',
        'has_pages_enabled': 'hasPagesEnabled',
        'is_broadcast': 'isBroadcast',
        'is_featured': 'isFeatured',
        'is_private': 'isPrivate',
        'has_dashboard': 'hasDashboard',
        'can_edit': 'canEdit',
        'has_any_content_enabled': 'hasAnyContentEnabled',
        'can_mention': 'canMention',
        'id': 'id',
        'created_at': 'createdAt',
        'can_create_page': 'canCreatePage',
        'description': 'description',
        'is_favorited': 'isFavorited',
        'is_content_manager': 'isContentManager',
        'category': 'category',
        'dashboard_layout': 'dashboardLayout',
        'has_albums': 'hasAlbums',
        'has_content': 'hasContent',
        'img_file': 'imgFile'
    }

    def __init__(self, is_access_requested=None, manager_count=None, site_id=None, can_create_album=None, has_albums_enabled=None, is_manager=None, img=None, access=None, cover_image=None, edit_url=None, landing_page=None, analytics=None, is_in_mandatory_subscription=None, is_listed=None, is_follower=None, img_thumbnail=None, is_content_submissions_enabled=None, is_owner=None, has_pages=None, name=None, is_chatter_group_only=None, information_title=None, information=None, storage_provider=None, dropbox_root_permission=None, can_create_event=None, has_events_enabled=None, url=None, is_active=None, slack=None, total_member_count=None, chatter_group_id=None, follower_count=None, is_public=None, has_events=None, is_content_feed_enabled=None, member_count=None, teams=None, can_activate_deactivate=None, has_pages_enabled=None, is_broadcast=None, is_featured=None, is_private=None, has_dashboard=None, can_edit=None, has_any_content_enabled=None, can_mention=None, id=None, created_at=None, can_create_page=None, description=None, is_favorited=None, is_content_manager=None, category=None, dashboard_layout=None, has_albums=None, has_content=None, img_file=None):  # noqa: E501
        """SiteEdit - a model defined in Swagger"""  # noqa: E501
        self._is_access_requested = None
        self._manager_count = None
        self._site_id = None
        self._can_create_album = None
        self._has_albums_enabled = None
        self._is_manager = None
        self._img = None
        self._access = None
        self._cover_image = None
        self._edit_url = None
        self._landing_page = None
        self._analytics = None
        self._is_in_mandatory_subscription = None
        self._is_listed = None
        self._is_follower = None
        self._img_thumbnail = None
        self._is_content_submissions_enabled = None
        self._is_owner = None
        self._has_pages = None
        self._name = None
        self._is_chatter_group_only = None
        self._information_title = None
        self._information = None
        self._storage_provider = None
        self._dropbox_root_permission = None
        self._can_create_event = None
        self._has_events_enabled = None
        self._url = None
        self._is_active = None
        self._slack = None
        self._total_member_count = None
        self._chatter_group_id = None
        self._follower_count = None
        self._is_public = None
        self._has_events = None
        self._is_content_feed_enabled = None
        self._member_count = None
        self._teams = None
        self._can_activate_deactivate = None
        self._has_pages_enabled = None
        self._is_broadcast = None
        self._is_featured = None
        self._is_private = None
        self._has_dashboard = None
        self._can_edit = None
        self._has_any_content_enabled = None
        self._can_mention = None
        self._id = None
        self._created_at = None
        self._can_create_page = None
        self._description = None
        self._is_favorited = None
        self._is_content_manager = None
        self._category = None
        self._dashboard_layout = None
        self._has_albums = None
        self._has_content = None
        self._img_file = None
        self.discriminator = None
        if is_access_requested is not None:
            self.is_access_requested = is_access_requested
        if manager_count is not None:
            self.manager_count = manager_count
        if site_id is not None:
            self.site_id = site_id
        if can_create_album is not None:
            self.can_create_album = can_create_album
        if has_albums_enabled is not None:
            self.has_albums_enabled = has_albums_enabled
        if is_manager is not None:
            self.is_manager = is_manager
        if img is not None:
            self.img = img
        if access is not None:
            self.access = access
        if cover_image is not None:
            self.cover_image = cover_image
        if edit_url is not None:
            self.edit_url = edit_url
        if landing_page is not None:
            self.landing_page = landing_page
        if analytics is not None:
            self.analytics = analytics
        if is_in_mandatory_subscription is not None:
            self.is_in_mandatory_subscription = is_in_mandatory_subscription
        if is_listed is not None:
            self.is_listed = is_listed
        if is_follower is not None:
            self.is_follower = is_follower
        if img_thumbnail is not None:
            self.img_thumbnail = img_thumbnail
        if is_content_submissions_enabled is not None:
            self.is_content_submissions_enabled = is_content_submissions_enabled
        if is_owner is not None:
            self.is_owner = is_owner
        if has_pages is not None:
            self.has_pages = has_pages
        if name is not None:
            self.name = name
        if is_chatter_group_only is not None:
            self.is_chatter_group_only = is_chatter_group_only
        if information_title is not None:
            self.information_title = information_title
        if information is not None:
            self.information = information
        if storage_provider is not None:
            self.storage_provider = storage_provider
        if dropbox_root_permission is not None:
            self.dropbox_root_permission = dropbox_root_permission
        if can_create_event is not None:
            self.can_create_event = can_create_event
        if has_events_enabled is not None:
            self.has_events_enabled = has_events_enabled
        if url is not None:
            self.url = url
        if is_active is not None:
            self.is_active = is_active
        if slack is not None:
            self.slack = slack
        if total_member_count is not None:
            self.total_member_count = total_member_count
        if chatter_group_id is not None:
            self.chatter_group_id = chatter_group_id
        if follower_count is not None:
            self.follower_count = follower_count
        if is_public is not None:
            self.is_public = is_public
        if has_events is not None:
            self.has_events = has_events
        if is_content_feed_enabled is not None:
            self.is_content_feed_enabled = is_content_feed_enabled
        if member_count is not None:
            self.member_count = member_count
        if teams is not None:
            self.teams = teams
        if can_activate_deactivate is not None:
            self.can_activate_deactivate = can_activate_deactivate
        if has_pages_enabled is not None:
            self.has_pages_enabled = has_pages_enabled
        if is_broadcast is not None:
            self.is_broadcast = is_broadcast
        if is_featured is not None:
            self.is_featured = is_featured
        if is_private is not None:
            self.is_private = is_private
        if has_dashboard is not None:
            self.has_dashboard = has_dashboard
        if can_edit is not None:
            self.can_edit = can_edit
        if has_any_content_enabled is not None:
            self.has_any_content_enabled = has_any_content_enabled
        if can_mention is not None:
            self.can_mention = can_mention
        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if can_create_page is not None:
            self.can_create_page = can_create_page
        if description is not None:
            self.description = description
        if is_favorited is not None:
            self.is_favorited = is_favorited
        if is_content_manager is not None:
            self.is_content_manager = is_content_manager
        if category is not None:
            self.category = category
        if dashboard_layout is not None:
            self.dashboard_layout = dashboard_layout
        if has_albums is not None:
            self.has_albums = has_albums
        if has_content is not None:
            self.has_content = has_content
        if img_file is not None:
            self.img_file = img_file

    @property
    def is_access_requested(self):
        """Gets the is_access_requested of this SiteEdit.  # noqa: E501


        :return: The is_access_requested of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._is_access_requested

    @is_access_requested.setter
    def is_access_requested(self, is_access_requested):
        """Sets the is_access_requested of this SiteEdit.


        :param is_access_requested: The is_access_requested of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._is_access_requested = is_access_requested

    @property
    def manager_count(self):
        """Gets the manager_count of this SiteEdit.  # noqa: E501


        :return: The manager_count of this SiteEdit.  # noqa: E501
        :rtype: int
        """
        return self._manager_count

    @manager_count.setter
    def manager_count(self, manager_count):
        """Sets the manager_count of this SiteEdit.


        :param manager_count: The manager_count of this SiteEdit.  # noqa: E501
        :type: int
        """

        self._manager_count = manager_count

    @property
    def site_id(self):
        """Gets the site_id of this SiteEdit.  # noqa: E501


        :return: The site_id of this SiteEdit.  # noqa: E501
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this SiteEdit.


        :param site_id: The site_id of this SiteEdit.  # noqa: E501
        :type: str
        """

        self._site_id = site_id

    @property
    def can_create_album(self):
        """Gets the can_create_album of this SiteEdit.  # noqa: E501


        :return: The can_create_album of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._can_create_album

    @can_create_album.setter
    def can_create_album(self, can_create_album):
        """Sets the can_create_album of this SiteEdit.


        :param can_create_album: The can_create_album of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._can_create_album = can_create_album

    @property
    def has_albums_enabled(self):
        """Gets the has_albums_enabled of this SiteEdit.  # noqa: E501


        :return: The has_albums_enabled of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._has_albums_enabled

    @has_albums_enabled.setter
    def has_albums_enabled(self, has_albums_enabled):
        """Sets the has_albums_enabled of this SiteEdit.


        :param has_albums_enabled: The has_albums_enabled of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._has_albums_enabled = has_albums_enabled

    @property
    def is_manager(self):
        """Gets the is_manager of this SiteEdit.  # noqa: E501


        :return: The is_manager of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._is_manager

    @is_manager.setter
    def is_manager(self, is_manager):
        """Sets the is_manager of this SiteEdit.


        :param is_manager: The is_manager of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._is_manager = is_manager

    @property
    def img(self):
        """Gets the img of this SiteEdit.  # noqa: E501


        :return: The img of this SiteEdit.  # noqa: E501
        :rtype: str
        """
        return self._img

    @img.setter
    def img(self, img):
        """Sets the img of this SiteEdit.


        :param img: The img of this SiteEdit.  # noqa: E501
        :type: str
        """

        self._img = img

    @property
    def access(self):
        """Gets the access of this SiteEdit.  # noqa: E501


        :return: The access of this SiteEdit.  # noqa: E501
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this SiteEdit.


        :param access: The access of this SiteEdit.  # noqa: E501
        :type: str
        """

        self._access = access

    @property
    def cover_image(self):
        """Gets the cover_image of this SiteEdit.  # noqa: E501


        :return: The cover_image of this SiteEdit.  # noqa: E501
        :rtype: str
        """
        return self._cover_image

    @cover_image.setter
    def cover_image(self, cover_image):
        """Sets the cover_image of this SiteEdit.


        :param cover_image: The cover_image of this SiteEdit.  # noqa: E501
        :type: str
        """

        self._cover_image = cover_image

    @property
    def edit_url(self):
        """Gets the edit_url of this SiteEdit.  # noqa: E501


        :return: The edit_url of this SiteEdit.  # noqa: E501
        :rtype: str
        """
        return self._edit_url

    @edit_url.setter
    def edit_url(self, edit_url):
        """Sets the edit_url of this SiteEdit.


        :param edit_url: The edit_url of this SiteEdit.  # noqa: E501
        :type: str
        """

        self._edit_url = edit_url

    @property
    def landing_page(self):
        """Gets the landing_page of this SiteEdit.  # noqa: E501


        :return: The landing_page of this SiteEdit.  # noqa: E501
        :rtype: str
        """
        return self._landing_page

    @landing_page.setter
    def landing_page(self, landing_page):
        """Sets the landing_page of this SiteEdit.


        :param landing_page: The landing_page of this SiteEdit.  # noqa: E501
        :type: str
        """

        self._landing_page = landing_page

    @property
    def analytics(self):
        """Gets the analytics of this SiteEdit.  # noqa: E501


        :return: The analytics of this SiteEdit.  # noqa: E501
        :rtype: SiteEditAnalytics
        """
        return self._analytics

    @analytics.setter
    def analytics(self, analytics):
        """Sets the analytics of this SiteEdit.


        :param analytics: The analytics of this SiteEdit.  # noqa: E501
        :type: SiteEditAnalytics
        """

        self._analytics = analytics

    @property
    def is_in_mandatory_subscription(self):
        """Gets the is_in_mandatory_subscription of this SiteEdit.  # noqa: E501


        :return: The is_in_mandatory_subscription of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._is_in_mandatory_subscription

    @is_in_mandatory_subscription.setter
    def is_in_mandatory_subscription(self, is_in_mandatory_subscription):
        """Sets the is_in_mandatory_subscription of this SiteEdit.


        :param is_in_mandatory_subscription: The is_in_mandatory_subscription of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._is_in_mandatory_subscription = is_in_mandatory_subscription

    @property
    def is_listed(self):
        """Gets the is_listed of this SiteEdit.  # noqa: E501


        :return: The is_listed of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._is_listed

    @is_listed.setter
    def is_listed(self, is_listed):
        """Sets the is_listed of this SiteEdit.


        :param is_listed: The is_listed of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._is_listed = is_listed

    @property
    def is_follower(self):
        """Gets the is_follower of this SiteEdit.  # noqa: E501


        :return: The is_follower of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._is_follower

    @is_follower.setter
    def is_follower(self, is_follower):
        """Sets the is_follower of this SiteEdit.


        :param is_follower: The is_follower of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._is_follower = is_follower

    @property
    def img_thumbnail(self):
        """Gets the img_thumbnail of this SiteEdit.  # noqa: E501


        :return: The img_thumbnail of this SiteEdit.  # noqa: E501
        :rtype: str
        """
        return self._img_thumbnail

    @img_thumbnail.setter
    def img_thumbnail(self, img_thumbnail):
        """Sets the img_thumbnail of this SiteEdit.


        :param img_thumbnail: The img_thumbnail of this SiteEdit.  # noqa: E501
        :type: str
        """

        self._img_thumbnail = img_thumbnail

    @property
    def is_content_submissions_enabled(self):
        """Gets the is_content_submissions_enabled of this SiteEdit.  # noqa: E501


        :return: The is_content_submissions_enabled of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._is_content_submissions_enabled

    @is_content_submissions_enabled.setter
    def is_content_submissions_enabled(self, is_content_submissions_enabled):
        """Sets the is_content_submissions_enabled of this SiteEdit.


        :param is_content_submissions_enabled: The is_content_submissions_enabled of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._is_content_submissions_enabled = is_content_submissions_enabled

    @property
    def is_owner(self):
        """Gets the is_owner of this SiteEdit.  # noqa: E501


        :return: The is_owner of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._is_owner

    @is_owner.setter
    def is_owner(self, is_owner):
        """Sets the is_owner of this SiteEdit.


        :param is_owner: The is_owner of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._is_owner = is_owner

    @property
    def has_pages(self):
        """Gets the has_pages of this SiteEdit.  # noqa: E501


        :return: The has_pages of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._has_pages

    @has_pages.setter
    def has_pages(self, has_pages):
        """Sets the has_pages of this SiteEdit.


        :param has_pages: The has_pages of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._has_pages = has_pages

    @property
    def name(self):
        """Gets the name of this SiteEdit.  # noqa: E501


        :return: The name of this SiteEdit.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SiteEdit.


        :param name: The name of this SiteEdit.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def is_chatter_group_only(self):
        """Gets the is_chatter_group_only of this SiteEdit.  # noqa: E501


        :return: The is_chatter_group_only of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._is_chatter_group_only

    @is_chatter_group_only.setter
    def is_chatter_group_only(self, is_chatter_group_only):
        """Sets the is_chatter_group_only of this SiteEdit.


        :param is_chatter_group_only: The is_chatter_group_only of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._is_chatter_group_only = is_chatter_group_only

    @property
    def information_title(self):
        """Gets the information_title of this SiteEdit.  # noqa: E501


        :return: The information_title of this SiteEdit.  # noqa: E501
        :rtype: str
        """
        return self._information_title

    @information_title.setter
    def information_title(self, information_title):
        """Sets the information_title of this SiteEdit.


        :param information_title: The information_title of this SiteEdit.  # noqa: E501
        :type: str
        """

        self._information_title = information_title

    @property
    def information(self):
        """Gets the information of this SiteEdit.  # noqa: E501


        :return: The information of this SiteEdit.  # noqa: E501
        :rtype: str
        """
        return self._information

    @information.setter
    def information(self, information):
        """Sets the information of this SiteEdit.


        :param information: The information of this SiteEdit.  # noqa: E501
        :type: str
        """

        self._information = information

    @property
    def storage_provider(self):
        """Gets the storage_provider of this SiteEdit.  # noqa: E501


        :return: The storage_provider of this SiteEdit.  # noqa: E501
        :rtype: str
        """
        return self._storage_provider

    @storage_provider.setter
    def storage_provider(self, storage_provider):
        """Sets the storage_provider of this SiteEdit.


        :param storage_provider: The storage_provider of this SiteEdit.  # noqa: E501
        :type: str
        """

        self._storage_provider = storage_provider

    @property
    def dropbox_root_permission(self):
        """Gets the dropbox_root_permission of this SiteEdit.  # noqa: E501


        :return: The dropbox_root_permission of this SiteEdit.  # noqa: E501
        :rtype: str
        """
        return self._dropbox_root_permission

    @dropbox_root_permission.setter
    def dropbox_root_permission(self, dropbox_root_permission):
        """Sets the dropbox_root_permission of this SiteEdit.


        :param dropbox_root_permission: The dropbox_root_permission of this SiteEdit.  # noqa: E501
        :type: str
        """

        self._dropbox_root_permission = dropbox_root_permission

    @property
    def can_create_event(self):
        """Gets the can_create_event of this SiteEdit.  # noqa: E501


        :return: The can_create_event of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._can_create_event

    @can_create_event.setter
    def can_create_event(self, can_create_event):
        """Sets the can_create_event of this SiteEdit.


        :param can_create_event: The can_create_event of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._can_create_event = can_create_event

    @property
    def has_events_enabled(self):
        """Gets the has_events_enabled of this SiteEdit.  # noqa: E501


        :return: The has_events_enabled of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._has_events_enabled

    @has_events_enabled.setter
    def has_events_enabled(self, has_events_enabled):
        """Sets the has_events_enabled of this SiteEdit.


        :param has_events_enabled: The has_events_enabled of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._has_events_enabled = has_events_enabled

    @property
    def url(self):
        """Gets the url of this SiteEdit.  # noqa: E501


        :return: The url of this SiteEdit.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SiteEdit.


        :param url: The url of this SiteEdit.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def is_active(self):
        """Gets the is_active of this SiteEdit.  # noqa: E501


        :return: The is_active of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this SiteEdit.


        :param is_active: The is_active of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def slack(self):
        """Gets the slack of this SiteEdit.  # noqa: E501


        :return: The slack of this SiteEdit.  # noqa: E501
        :rtype: str
        """
        return self._slack

    @slack.setter
    def slack(self, slack):
        """Sets the slack of this SiteEdit.


        :param slack: The slack of this SiteEdit.  # noqa: E501
        :type: str
        """

        self._slack = slack

    @property
    def total_member_count(self):
        """Gets the total_member_count of this SiteEdit.  # noqa: E501


        :return: The total_member_count of this SiteEdit.  # noqa: E501
        :rtype: int
        """
        return self._total_member_count

    @total_member_count.setter
    def total_member_count(self, total_member_count):
        """Sets the total_member_count of this SiteEdit.


        :param total_member_count: The total_member_count of this SiteEdit.  # noqa: E501
        :type: int
        """

        self._total_member_count = total_member_count

    @property
    def chatter_group_id(self):
        """Gets the chatter_group_id of this SiteEdit.  # noqa: E501


        :return: The chatter_group_id of this SiteEdit.  # noqa: E501
        :rtype: str
        """
        return self._chatter_group_id

    @chatter_group_id.setter
    def chatter_group_id(self, chatter_group_id):
        """Sets the chatter_group_id of this SiteEdit.


        :param chatter_group_id: The chatter_group_id of this SiteEdit.  # noqa: E501
        :type: str
        """

        self._chatter_group_id = chatter_group_id

    @property
    def follower_count(self):
        """Gets the follower_count of this SiteEdit.  # noqa: E501


        :return: The follower_count of this SiteEdit.  # noqa: E501
        :rtype: int
        """
        return self._follower_count

    @follower_count.setter
    def follower_count(self, follower_count):
        """Sets the follower_count of this SiteEdit.


        :param follower_count: The follower_count of this SiteEdit.  # noqa: E501
        :type: int
        """

        self._follower_count = follower_count

    @property
    def is_public(self):
        """Gets the is_public of this SiteEdit.  # noqa: E501


        :return: The is_public of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this SiteEdit.


        :param is_public: The is_public of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def has_events(self):
        """Gets the has_events of this SiteEdit.  # noqa: E501


        :return: The has_events of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._has_events

    @has_events.setter
    def has_events(self, has_events):
        """Sets the has_events of this SiteEdit.


        :param has_events: The has_events of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._has_events = has_events

    @property
    def is_content_feed_enabled(self):
        """Gets the is_content_feed_enabled of this SiteEdit.  # noqa: E501


        :return: The is_content_feed_enabled of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._is_content_feed_enabled

    @is_content_feed_enabled.setter
    def is_content_feed_enabled(self, is_content_feed_enabled):
        """Sets the is_content_feed_enabled of this SiteEdit.


        :param is_content_feed_enabled: The is_content_feed_enabled of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._is_content_feed_enabled = is_content_feed_enabled

    @property
    def member_count(self):
        """Gets the member_count of this SiteEdit.  # noqa: E501


        :return: The member_count of this SiteEdit.  # noqa: E501
        :rtype: int
        """
        return self._member_count

    @member_count.setter
    def member_count(self, member_count):
        """Sets the member_count of this SiteEdit.


        :param member_count: The member_count of this SiteEdit.  # noqa: E501
        :type: int
        """

        self._member_count = member_count

    @property
    def teams(self):
        """Gets the teams of this SiteEdit.  # noqa: E501


        :return: The teams of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this SiteEdit.


        :param teams: The teams of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._teams = teams

    @property
    def can_activate_deactivate(self):
        """Gets the can_activate_deactivate of this SiteEdit.  # noqa: E501


        :return: The can_activate_deactivate of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._can_activate_deactivate

    @can_activate_deactivate.setter
    def can_activate_deactivate(self, can_activate_deactivate):
        """Sets the can_activate_deactivate of this SiteEdit.


        :param can_activate_deactivate: The can_activate_deactivate of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._can_activate_deactivate = can_activate_deactivate

    @property
    def has_pages_enabled(self):
        """Gets the has_pages_enabled of this SiteEdit.  # noqa: E501


        :return: The has_pages_enabled of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._has_pages_enabled

    @has_pages_enabled.setter
    def has_pages_enabled(self, has_pages_enabled):
        """Sets the has_pages_enabled of this SiteEdit.


        :param has_pages_enabled: The has_pages_enabled of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._has_pages_enabled = has_pages_enabled

    @property
    def is_broadcast(self):
        """Gets the is_broadcast of this SiteEdit.  # noqa: E501


        :return: The is_broadcast of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._is_broadcast

    @is_broadcast.setter
    def is_broadcast(self, is_broadcast):
        """Sets the is_broadcast of this SiteEdit.


        :param is_broadcast: The is_broadcast of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._is_broadcast = is_broadcast

    @property
    def is_featured(self):
        """Gets the is_featured of this SiteEdit.  # noqa: E501


        :return: The is_featured of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._is_featured

    @is_featured.setter
    def is_featured(self, is_featured):
        """Sets the is_featured of this SiteEdit.


        :param is_featured: The is_featured of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._is_featured = is_featured

    @property
    def is_private(self):
        """Gets the is_private of this SiteEdit.  # noqa: E501


        :return: The is_private of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this SiteEdit.


        :param is_private: The is_private of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._is_private = is_private

    @property
    def has_dashboard(self):
        """Gets the has_dashboard of this SiteEdit.  # noqa: E501


        :return: The has_dashboard of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._has_dashboard

    @has_dashboard.setter
    def has_dashboard(self, has_dashboard):
        """Sets the has_dashboard of this SiteEdit.


        :param has_dashboard: The has_dashboard of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._has_dashboard = has_dashboard

    @property
    def can_edit(self):
        """Gets the can_edit of this SiteEdit.  # noqa: E501


        :return: The can_edit of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit

    @can_edit.setter
    def can_edit(self, can_edit):
        """Sets the can_edit of this SiteEdit.


        :param can_edit: The can_edit of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._can_edit = can_edit

    @property
    def has_any_content_enabled(self):
        """Gets the has_any_content_enabled of this SiteEdit.  # noqa: E501


        :return: The has_any_content_enabled of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._has_any_content_enabled

    @has_any_content_enabled.setter
    def has_any_content_enabled(self, has_any_content_enabled):
        """Sets the has_any_content_enabled of this SiteEdit.


        :param has_any_content_enabled: The has_any_content_enabled of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._has_any_content_enabled = has_any_content_enabled

    @property
    def can_mention(self):
        """Gets the can_mention of this SiteEdit.  # noqa: E501


        :return: The can_mention of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._can_mention

    @can_mention.setter
    def can_mention(self, can_mention):
        """Sets the can_mention of this SiteEdit.


        :param can_mention: The can_mention of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._can_mention = can_mention

    @property
    def id(self):
        """Gets the id of this SiteEdit.  # noqa: E501


        :return: The id of this SiteEdit.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SiteEdit.


        :param id: The id of this SiteEdit.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this SiteEdit.  # noqa: E501


        :return: The created_at of this SiteEdit.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SiteEdit.


        :param created_at: The created_at of this SiteEdit.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def can_create_page(self):
        """Gets the can_create_page of this SiteEdit.  # noqa: E501


        :return: The can_create_page of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._can_create_page

    @can_create_page.setter
    def can_create_page(self, can_create_page):
        """Sets the can_create_page of this SiteEdit.


        :param can_create_page: The can_create_page of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._can_create_page = can_create_page

    @property
    def description(self):
        """Gets the description of this SiteEdit.  # noqa: E501


        :return: The description of this SiteEdit.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SiteEdit.


        :param description: The description of this SiteEdit.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_favorited(self):
        """Gets the is_favorited of this SiteEdit.  # noqa: E501


        :return: The is_favorited of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._is_favorited

    @is_favorited.setter
    def is_favorited(self, is_favorited):
        """Sets the is_favorited of this SiteEdit.


        :param is_favorited: The is_favorited of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._is_favorited = is_favorited

    @property
    def is_content_manager(self):
        """Gets the is_content_manager of this SiteEdit.  # noqa: E501


        :return: The is_content_manager of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._is_content_manager

    @is_content_manager.setter
    def is_content_manager(self, is_content_manager):
        """Sets the is_content_manager of this SiteEdit.


        :param is_content_manager: The is_content_manager of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._is_content_manager = is_content_manager

    @property
    def category(self):
        """Gets the category of this SiteEdit.  # noqa: E501


        :return: The category of this SiteEdit.  # noqa: E501
        :rtype: SiteEditCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SiteEdit.


        :param category: The category of this SiteEdit.  # noqa: E501
        :type: SiteEditCategory
        """

        self._category = category

    @property
    def dashboard_layout(self):
        """Gets the dashboard_layout of this SiteEdit.  # noqa: E501


        :return: The dashboard_layout of this SiteEdit.  # noqa: E501
        :rtype: str
        """
        return self._dashboard_layout

    @dashboard_layout.setter
    def dashboard_layout(self, dashboard_layout):
        """Sets the dashboard_layout of this SiteEdit.


        :param dashboard_layout: The dashboard_layout of this SiteEdit.  # noqa: E501
        :type: str
        """

        self._dashboard_layout = dashboard_layout

    @property
    def has_albums(self):
        """Gets the has_albums of this SiteEdit.  # noqa: E501


        :return: The has_albums of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._has_albums

    @has_albums.setter
    def has_albums(self, has_albums):
        """Sets the has_albums of this SiteEdit.


        :param has_albums: The has_albums of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._has_albums = has_albums

    @property
    def has_content(self):
        """Gets the has_content of this SiteEdit.  # noqa: E501


        :return: The has_content of this SiteEdit.  # noqa: E501
        :rtype: bool
        """
        return self._has_content

    @has_content.setter
    def has_content(self, has_content):
        """Sets the has_content of this SiteEdit.


        :param has_content: The has_content of this SiteEdit.  # noqa: E501
        :type: bool
        """

        self._has_content = has_content

    @property
    def img_file(self):
        """Gets the img_file of this SiteEdit.  # noqa: E501


        :return: The img_file of this SiteEdit.  # noqa: E501
        :rtype: str
        """
        return self._img_file

    @img_file.setter
    def img_file(self, img_file):
        """Sets the img_file of this SiteEdit.


        :param img_file: The img_file of this SiteEdit.  # noqa: E501
        :type: str
        """

        self._img_file = img_file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SiteEdit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SiteEdit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
