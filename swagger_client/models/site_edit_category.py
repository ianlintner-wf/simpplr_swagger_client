# coding: utf-8

"""
    Simpplr APIs

    This collection of Simpplr APIs lets developers create and manage content outside the Simpplr UI. We have APIs for notifications, alerts, app searches, and content creation. Looking for parameters or code samples? Click on an endpoint to see a sample snippet along with descriptions of its parameters and responses.  If you have questions about an API, reach out to us support@simpplr.com  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SiteEditCategory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'category_id': 'str',
        'name': 'str',
        'site_coun': 'int',
        'is_uncategorized': 'bool',
        'access': 'str',
        'list_of_sites': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'category_id': 'categoryId',
        'name': 'name',
        'site_coun': 'siteCoun',
        'is_uncategorized': 'isUncategorized',
        'access': 'access',
        'list_of_sites': 'listOfSites'
    }

    def __init__(self, id=None, category_id=None, name=None, site_coun=None, is_uncategorized=None, access=None, list_of_sites=None):  # noqa: E501
        """SiteEditCategory - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._category_id = None
        self._name = None
        self._site_coun = None
        self._is_uncategorized = None
        self._access = None
        self._list_of_sites = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if category_id is not None:
            self.category_id = category_id
        if name is not None:
            self.name = name
        if site_coun is not None:
            self.site_coun = site_coun
        if is_uncategorized is not None:
            self.is_uncategorized = is_uncategorized
        if access is not None:
            self.access = access
        if list_of_sites is not None:
            self.list_of_sites = list_of_sites

    @property
    def id(self):
        """Gets the id of this SiteEditCategory.  # noqa: E501


        :return: The id of this SiteEditCategory.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SiteEditCategory.


        :param id: The id of this SiteEditCategory.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def category_id(self):
        """Gets the category_id of this SiteEditCategory.  # noqa: E501


        :return: The category_id of this SiteEditCategory.  # noqa: E501
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this SiteEditCategory.


        :param category_id: The category_id of this SiteEditCategory.  # noqa: E501
        :type: str
        """

        self._category_id = category_id

    @property
    def name(self):
        """Gets the name of this SiteEditCategory.  # noqa: E501


        :return: The name of this SiteEditCategory.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SiteEditCategory.


        :param name: The name of this SiteEditCategory.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def site_coun(self):
        """Gets the site_coun of this SiteEditCategory.  # noqa: E501


        :return: The site_coun of this SiteEditCategory.  # noqa: E501
        :rtype: int
        """
        return self._site_coun

    @site_coun.setter
    def site_coun(self, site_coun):
        """Sets the site_coun of this SiteEditCategory.


        :param site_coun: The site_coun of this SiteEditCategory.  # noqa: E501
        :type: int
        """

        self._site_coun = site_coun

    @property
    def is_uncategorized(self):
        """Gets the is_uncategorized of this SiteEditCategory.  # noqa: E501


        :return: The is_uncategorized of this SiteEditCategory.  # noqa: E501
        :rtype: bool
        """
        return self._is_uncategorized

    @is_uncategorized.setter
    def is_uncategorized(self, is_uncategorized):
        """Sets the is_uncategorized of this SiteEditCategory.


        :param is_uncategorized: The is_uncategorized of this SiteEditCategory.  # noqa: E501
        :type: bool
        """

        self._is_uncategorized = is_uncategorized

    @property
    def access(self):
        """Gets the access of this SiteEditCategory.  # noqa: E501


        :return: The access of this SiteEditCategory.  # noqa: E501
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this SiteEditCategory.


        :param access: The access of this SiteEditCategory.  # noqa: E501
        :type: str
        """

        self._access = access

    @property
    def list_of_sites(self):
        """Gets the list_of_sites of this SiteEditCategory.  # noqa: E501


        :return: The list_of_sites of this SiteEditCategory.  # noqa: E501
        :rtype: list[str]
        """
        return self._list_of_sites

    @list_of_sites.setter
    def list_of_sites(self, list_of_sites):
        """Sets the list_of_sites of this SiteEditCategory.


        :param list_of_sites: The list_of_sites of this SiteEditCategory.  # noqa: E501
        :type: list[str]
        """

        self._list_of_sites = list_of_sites

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SiteEditCategory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SiteEditCategory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
