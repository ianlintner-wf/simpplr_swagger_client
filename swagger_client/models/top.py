# coding: utf-8

"""
    Simpplr APIs

    This collection of Simpplr APIs lets developers create and manage content outside the Simpplr UI. We have APIs for notifications, alerts, app searches, and content creation. Looking for parameters or code samples? Click on an endpoint to see a sample snippet along with descriptions of its parameters and responses.  If you have questions about an API, reach out to us support@simpplr.com  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Top(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'term': 'str',
        'size': 'int',
        'section': 'str',
        'is_correction_enabled': 'bool'
    }

    attribute_map = {
        'term': 'term',
        'size': 'size',
        'section': 'section',
        'is_correction_enabled': 'isCorrectionEnabled'
    }

    def __init__(self, term=None, size=None, section=None, is_correction_enabled=None):  # noqa: E501
        """Top - a model defined in Swagger"""  # noqa: E501
        self._term = None
        self._size = None
        self._section = None
        self._is_correction_enabled = None
        self.discriminator = None
        if term is not None:
            self.term = term
        if size is not None:
            self.size = size
        if section is not None:
            self.section = section
        if is_correction_enabled is not None:
            self.is_correction_enabled = is_correction_enabled

    @property
    def term(self):
        """Gets the term of this Top.  # noqa: E501


        :return: The term of this Top.  # noqa: E501
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this Top.


        :param term: The term of this Top.  # noqa: E501
        :type: str
        """

        self._term = term

    @property
    def size(self):
        """Gets the size of this Top.  # noqa: E501


        :return: The size of this Top.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Top.


        :param size: The size of this Top.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def section(self):
        """Gets the section of this Top.  # noqa: E501


        :return: The section of this Top.  # noqa: E501
        :rtype: str
        """
        return self._section

    @section.setter
    def section(self, section):
        """Sets the section of this Top.


        :param section: The section of this Top.  # noqa: E501
        :type: str
        """

        self._section = section

    @property
    def is_correction_enabled(self):
        """Gets the is_correction_enabled of this Top.  # noqa: E501


        :return: The is_correction_enabled of this Top.  # noqa: E501
        :rtype: bool
        """
        return self._is_correction_enabled

    @is_correction_enabled.setter
    def is_correction_enabled(self, is_correction_enabled):
        """Sets the is_correction_enabled of this Top.


        :param is_correction_enabled: The is_correction_enabled of this Top.  # noqa: E501
        :type: bool
        """

        self._is_correction_enabled = is_correction_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Top, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Top):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
